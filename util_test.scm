(require "./util")

(use gauche.test)
(test-start "Utilities")

(test-section "list->lset")
(define lis0 '(h a a g s d h f a g s d s h h s a a f f a h g s a a f a s a))
(test* #`",lis0" '(a s d f g h) (list->lset lis0) lset-eq?)
(test* "(a a a)" '(a) (list->lset '(a a a)) lset-eq?)
(test* "()" '() (list->lset '()) lset-eq?)
;(time (dotimes (i 1000) (list->lset_lset lis0)))
;(time (dotimes (i 1000) (list->lset_sort_uniq lis0)))
;(time (dotimes (i 1000) (list->lset_hashtable lis0)))

(test-section "lset-eq?")
(test* "(a b c) (a b c)" #t (lset-eq? '(a b c) '(a b c)))
(test* "(a b c) (a b c c)" #f (lset-eq? '(a b c) '(a b c c)))
(test* "(a b b c) (a b c c)" #f (lset-eq? '(a b b c) '(a b c c)))
(test* "(a b c) (a c b)" #t (lset-eq? '(a b c) '(a c b)))
(test* "() ()" #t (lset-eq? '() '()))

(test-section "uniq")
(test* "(a a a b b c c c a a)" '(a b c a) (uniq eq? '(a a a b b c c c a a)))
(test* "(a a a)" '(a) (uniq eq? '(a a a)))
(test* "(#t #f #t #t #f #f #t)" '(#t #f #t #f #t) (uniq eq? '(#t #f #t #t #f #f #t)))
(test* "()" '() (uniq eq? '()))

(test-section "symbol-append")
(test* "'abc + 'def" 'abcdef (symbol-append 'abc 'def))
(test* "'abc + '#" 'abc# (symbol-append 'abc '|#|))

(test-section "tagged-list?-proc")
(test* "with 'data, (data 1 2 3)" #t ((tagged-list?-proc 'data) '(data 1 2 3)))
(test* "with 'data, (data)" #t ((tagged-list?-proc 'data) '(data)))
(test* "with 'data, (date 1 2 3)" #f ((tagged-list?-proc 'data) '(date 1 2 3)))
(test* "with 'data, ()" #f ((tagged-list?-proc 'data) '()))
(test* "with 'data, 'data" #f ((tagged-list?-proc 'data) 'data))

(test-section "split-list-by-symbol")
(test* "(1 / 2 / 3) by '/" '((1) (2) (3)) (split-list-by-symbol '(1 / 2 / 3) '/))
(test* "(1 2 / 3 4 /) by '/" '((1 2) (3 4) ()) (split-list-by-symbol '(1 2 / 3 4 /) '/))
(test* "(/ 1 2 / 3 4) by '/" '(() (1 2) (3 4)) (split-list-by-symbol '(/ 1 2 / 3 4) '/))
(test* "(/ 1 2 / 3 4 /) by '/" '(() (1 2) (3 4) ()) (split-list-by-symbol '(/ 1 2 / 3 4 /) '/))
(test* "(1 2 / 3 4 / 5 6) by '/" '((1 2) (3 4) (5 6)) (split-list-by-symbol '(1 2 / 3 4 / 5 6) '/))
(test* "(/) by '/" '(() ()) (split-list-by-symbol '(/) '/))
(test* "() by '/" '(()) (split-list-by-symbol '() '/))
(test* "(/) by '-" '((/)) (split-list-by-symbol '(/) '-))

(test-section "collect-assq")
(define alist1 '((o 1) (p 2) (p 3) (q 4) (p 5) (r 6) (p 7) (s 8)))
(test* #`"o in ,alist1" '((o 1)) (collect-assq 'o alist1))
(test* #`"p in ,alist1" '((p 2) (p 3) (p 5) (p 7)) (collect-assq 'p alist1))
(test* #`"q in ,alist1" '((q 4)) (collect-assq 'q alist1))
(test* #`"r in ,alist1" '((r 6)) (collect-assq 'r alist1))
(test* #`"s in ,alist1" '((s 8)) (collect-assq 's alist1))
(test* #`"t in ,alist1" '() (collect-assq 't alist1))
(test* #`"p in ()" '() (collect-assq 'p ()))
(test-section "collect-cdr-assq")
(test* #`"p in ,alist1" '((2) (3) (5) (7)) (collect-cdr-assq 'p alist1))
(test* #`"p in ()" '() (collect-cdr-assq 'p ()))
(test* #`"t in ,alist1" '() (collect-cdr-assq 't alist1))
(test-section "!collect-assq")
(test* #`"p in ,alist1" '((o 1) (q 4) (r 6) (s 8)) (!collect-assq 'p alist1))
(test* #`"p in ()" '() (!collect-assq 'p ()))

(test-end)
